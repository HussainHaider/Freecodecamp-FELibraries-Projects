{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\HP\\\\Documents\\\\Front-end\\\\calculator\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from './action';\nconst initialState = {\n  result: '0',\n  value: 0,\n  operation: null\n};\n\nconst checkResult = (result, val) => {\n  if (result.length >= 8) {\n    return result;\n  } else {\n    let res = result + val;\n    return res.toString().replace(/^0+/, '');\n  }\n};\n\nconst calculateResult = (num1, num2, symbol) => {\n  let res = 0;\n\n  if (symbol === \"+\") {\n    res = num1 + num2;\n  } else if (symbol === \"-\") {\n    res = num1 - num2;\n  } else if (symbol === \"*\") {\n    res = num1 * num2;\n  } else if (symbol === \"/\") {\n    res = num1 / num2;\n  } else if (symbol === \"/\") {\n    res = num1 ** num1;\n  }\n\n  res = res.toFixed(4).toString();\n  return parseFloat(res);\n};\n\nconst reducer = (state = initialState, action) => {\n  let result = 0;\n\n  switch (action.type) {\n    case actionTypes.ZERO:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '0')\n      });\n\n    case actionTypes.ONE:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '1')\n      });\n\n    case actionTypes.TWO:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '2')\n      });\n\n    case actionTypes.THREE:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '3')\n      });\n\n    case actionTypes.FOUR:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '4')\n      });\n\n    case actionTypes.FIVE:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '5')\n      });\n\n    case actionTypes.SIX:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '6')\n      });\n\n    case actionTypes.SEVEN:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '7')\n      });\n\n    case actionTypes.EIGHT:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '8')\n      });\n\n    case actionTypes.NINE:\n      return _objectSpread({}, state, {\n        result: checkResult(state.result, '9')\n      });\n\n    case actionTypes.DECIMAL:\n      if (state.result.includes('.') === true) {\n        return state;\n      } else {\n        return _objectSpread({}, state, {\n          result: checkResult(state.result, '.')\n        });\n      }\n\n    case actionTypes.ADD:\n      return {\n        value: parseFloat(state.result),\n        operation: '+',\n        result: '0'\n      };\n\n    case actionTypes.SUBTRACT:\n      return {\n        value: parseFloat(state.result),\n        operation: '-',\n        result: '0'\n      };\n\n    case actionTypes.MULTIPLY:\n      if (state.operation !== null) {\n        result = calculateResult(state.value, parseFloat(state.result), state.operation);\n        return {\n          value: parseFloat(result),\n          operation: '*',\n          result: '0'\n        };\n      } else {\n        return {\n          value: parseFloat(state.result),\n          operation: '*',\n          result: '0'\n        };\n      }\n\n    case actionTypes.DIVIDE:\n      return {\n        value: parseFloat(state.result),\n        operation: '/',\n        result: '0'\n      };\n\n    case actionTypes.POWER:\n      return {\n        value: parseFloat(state.result),\n        operation: '^',\n        result: '0'\n      };\n\n    case actionTypes.PERCENTAGE:\n      return state;\n\n    case actionTypes.EQUAL:\n      result = calculateResult(state.value, parseFloat(state.result), state.operation);\n      return {\n        operation: null,\n        result: result,\n        value: result\n      };\n\n    case actionTypes.ALL_CLEAR:\n      return {\n        result: '0',\n        operation: null,\n        value: 0\n      };\n\n    case actionTypes.CLEAR:\n      return _objectSpread({}, state, {\n        result: state.result.substring(0, state.result.length - 1)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:\\Users\\HP\\Documents\\Front-end\\calculator\\src\\store\\reducer.js"],"names":["actionTypes","initialState","result","value","operation","checkResult","val","length","res","toString","replace","calculateResult","num1","num2","symbol","toFixed","parseFloat","reducer","state","action","type","ZERO","ONE","TWO","THREE","FOUR","FIVE","SIX","SEVEN","EIGHT","NINE","DECIMAL","includes","ADD","SUBTRACT","MULTIPLY","DIVIDE","POWER","PERCENTAGE","EQUAL","ALL_CLEAR","CLEAR","substring"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,UAA7B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,GADS;AAEjBC,EAAAA,KAAK,EAAE,CAFU;AAGjBC,EAAAA,SAAS,EAAC;AAHO,CAArB;;AAMA,MAAMC,WAAW,GAAG,CAACH,MAAD,EAAQI,GAAR,KAAgB;AAChC,MAAGJ,MAAM,CAACK,MAAP,IAAgB,CAAnB,EAAuB;AACnB,WAAOL,MAAP;AACH,GAFD,MAEO;AACH,QAAIM,GAAG,GAAIN,MAAM,GAAGI,GAApB;AACA,WAAOE,GAAG,CAACC,QAAJ,GAAeC,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,CAAP;AACH;AACJ,CAPD;;AASA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAMC,IAAN,EAAWC,MAAX,KAAsB;AAC1C,MAAIN,GAAG,GAAG,CAAV;;AAEF,MAAGM,MAAM,KAAK,GAAd,EAAmB;AACfN,IAAAA,GAAG,GAAGI,IAAI,GAAGC,IAAb;AACH,GAFD,MAEO,IAAGC,MAAM,KAAK,GAAd,EAAmB;AACtBN,IAAAA,GAAG,GAAGI,IAAI,GAAGC,IAAb;AACH,GAFM,MAEA,IAAGC,MAAM,KAAK,GAAd,EAAmB;AACtBN,IAAAA,GAAG,GAAGI,IAAI,GAAGC,IAAb;AACH,GAFM,MAEA,IAAGC,MAAM,KAAK,GAAd,EAAmB;AACtBN,IAAAA,GAAG,GAAGI,IAAI,GAAGC,IAAb;AACH,GAFM,MAEA,IAAGC,MAAM,KAAK,GAAd,EAAmB;AACtBN,IAAAA,GAAG,GAAGI,IAAI,IAAEA,IAAZ;AACH;;AAEDJ,EAAAA,GAAG,GAAGA,GAAG,CAACO,OAAJ,CAAY,CAAZ,EAAeN,QAAf,EAAN;AACA,SAAOO,UAAU,CAACR,GAAD,CAAjB;AACD,CAjBD;;AAqBA,MAAMS,OAAO,GAAG,CAACC,KAAK,GAAGjB,YAAT,EAAuBkB,MAAvB,KAAkC;AAC9C,MAAIjB,MAAM,GAAE,CAAZ;;AACA,UAAQiB,MAAM,CAACC,IAAf;AACI,SAAKpB,WAAW,CAACqB,IAAjB;AACI,+BACOH,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAACsB,GAAjB;AACI,+BACOJ,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAACuB,GAAjB;AACI,+BACOL,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAACwB,KAAjB;AACI,+BACON,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAACyB,IAAjB;AACI,+BACOP,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAAC0B,IAAjB;AACI,+BACOR,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAAC2B,GAAjB;AACI,+BACOT,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAAC4B,KAAjB;AACI,+BACOV,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAAC6B,KAAjB;AACI,+BACOX,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAAC8B,IAAjB;AACI,+BACOZ,KADP;AAEIhB,QAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;;AAIJ,SAAKF,WAAW,CAAC+B,OAAjB;AACI,UAAIb,KAAK,CAAChB,MAAN,CAAa8B,QAAb,CAAsB,GAAtB,MAA6B,IAAjC,EAAuC;AACnC,eAAOd,KAAP;AACH,OAFD,MAEO;AACH,iCACOA,KADP;AAEIhB,UAAAA,MAAM,EAACG,WAAW,CAACa,KAAK,CAAChB,MAAP,EAAc,GAAd;AAFtB;AAIH;;AAEL,SAAKF,WAAW,CAACiC,GAAjB;AACI,aAAO;AACH9B,QAAAA,KAAK,EAAEa,UAAU,CAACE,KAAK,CAAChB,MAAP,CADd;AAEHE,QAAAA,SAAS,EAAC,GAFP;AAGHF,QAAAA,MAAM,EAAC;AAHJ,OAAP;;AAKJ,SAAKF,WAAW,CAACkC,QAAjB;AACI,aAAO;AACH/B,QAAAA,KAAK,EAAEa,UAAU,CAACE,KAAK,CAAChB,MAAP,CADd;AAEHE,QAAAA,SAAS,EAAC,GAFP;AAGHF,QAAAA,MAAM,EAAC;AAHJ,OAAP;;AAKJ,SAAKF,WAAW,CAACmC,QAAjB;AACI,UAAGjB,KAAK,CAACd,SAAN,KAAkB,IAArB,EAA2B;AACvBF,QAAAA,MAAM,GAAGS,eAAe,CAACO,KAAK,CAACf,KAAP,EAAaa,UAAU,CAACE,KAAK,CAAChB,MAAP,CAAvB,EAAsCgB,KAAK,CAACd,SAA5C,CAAxB;AACA,eAAO;AACHD,UAAAA,KAAK,EAAEa,UAAU,CAACd,MAAD,CADd;AAEHE,UAAAA,SAAS,EAAC,GAFP;AAGHF,UAAAA,MAAM,EAAC;AAHJ,SAAP;AAKH,OAPD,MAOO;AACH,eAAO;AACHC,UAAAA,KAAK,EAAEa,UAAU,CAACE,KAAK,CAAChB,MAAP,CADd;AAEHE,UAAAA,SAAS,EAAC,GAFP;AAGHF,UAAAA,MAAM,EAAC;AAHJ,SAAP;AAKH;;AAEL,SAAKF,WAAW,CAACoC,MAAjB;AACI,aAAO;AACHjC,QAAAA,KAAK,EAAEa,UAAU,CAACE,KAAK,CAAChB,MAAP,CADd;AAEHE,QAAAA,SAAS,EAAC,GAFP;AAGHF,QAAAA,MAAM,EAAC;AAHJ,OAAP;;AAKJ,SAAKF,WAAW,CAACqC,KAAjB;AACI,aAAO;AACHlC,QAAAA,KAAK,EAAEa,UAAU,CAACE,KAAK,CAAChB,MAAP,CADd;AAEHE,QAAAA,SAAS,EAAC,GAFP;AAGHF,QAAAA,MAAM,EAAC;AAHJ,OAAP;;AAKJ,SAAKF,WAAW,CAACsC,UAAjB;AACI,aAAOpB,KAAP;;AAEJ,SAAKlB,WAAW,CAACuC,KAAjB;AACIrC,MAAAA,MAAM,GAAGS,eAAe,CAACO,KAAK,CAACf,KAAP,EAAaa,UAAU,CAACE,KAAK,CAAChB,MAAP,CAAvB,EAAsCgB,KAAK,CAACd,SAA5C,CAAxB;AACA,aAAO;AACHA,QAAAA,SAAS,EAAC,IADP;AAEHF,QAAAA,MAAM,EAACA,MAFJ;AAGHC,QAAAA,KAAK,EAACD;AAHH,OAAP;;AAMJ,SAAKF,WAAW,CAACwC,SAAjB;AACI,aAAO;AACHtC,QAAAA,MAAM,EAAE,GADL;AAEHE,QAAAA,SAAS,EAAC,IAFP;AAGHD,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAKH,WAAW,CAACyC,KAAjB;AACI,+BACOvB,KADP;AAEIhB,QAAAA,MAAM,EAAEgB,KAAK,CAAChB,MAAN,CAAawC,SAAb,CAAuB,CAAvB,EAA0BxB,KAAK,CAAChB,MAAN,CAAaK,MAAb,GAAsB,CAAhD;AAFZ;;AAIJ;AACI,aAAOW,KAAP;AA5HR;AA8HH,CAhID;;AAkIA,eAAeD,OAAf","sourcesContent":["import * as actionTypes from './action'\r\n\r\nconst initialState = {\r\n    result: '0',\r\n    value: 0,\r\n    operation:null\r\n};\r\n\r\nconst checkResult = (result,val) => {\r\n    if(result.length >=8 ) {\r\n        return result;\r\n    } else {\r\n        let res  = result + val;\r\n        return res.toString().replace(/^0+/, '');\r\n    }\r\n};\r\n\r\nconst calculateResult = (num1,num2,symbol) => {\r\n    let res = 0;\r\n\r\n  if(symbol === \"+\") {\r\n      res = num1 + num2;\r\n  } else if(symbol === \"-\") {\r\n      res = num1 - num2;\r\n  } else if(symbol === \"*\") {\r\n      res = num1 * num2;\r\n  } else if(symbol === \"/\") {\r\n      res = num1 / num2;\r\n  } else if(symbol === \"/\") {\r\n      res = num1**num1;\r\n  }\r\n\r\n  res = res.toFixed(4).toString();\r\n  return parseFloat(res);\r\n};\r\n\r\n\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    let result =0;\r\n    switch (action.type) {\r\n        case actionTypes.ZERO:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'0')\r\n            };\r\n        case actionTypes.ONE:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'1')\r\n            };\r\n        case actionTypes.TWO:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'2')\r\n            };\r\n        case actionTypes.THREE:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'3')\r\n            };\r\n        case actionTypes.FOUR:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'4')\r\n            };\r\n        case actionTypes.FIVE:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'5')\r\n            };\r\n        case actionTypes.SIX:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'6')\r\n            };\r\n        case actionTypes.SEVEN:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'7')\r\n            };\r\n        case actionTypes.EIGHT:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'8')\r\n            };\r\n        case actionTypes.NINE:\r\n            return {\r\n                ...state,\r\n                result:checkResult(state.result,'9')\r\n            };\r\n        case actionTypes.DECIMAL:\r\n            if (state.result.includes('.')===true) {\r\n                return state;\r\n            } else {\r\n                return {\r\n                    ...state,\r\n                    result:checkResult(state.result,'.')\r\n                };\r\n            }\r\n\r\n        case actionTypes.ADD:\r\n            return {\r\n                value: parseFloat(state.result),\r\n                operation:'+',\r\n                result:'0'\r\n            };\r\n        case actionTypes.SUBTRACT:\r\n            return {\r\n                value: parseFloat(state.result),\r\n                operation:'-',\r\n                result:'0'\r\n            };\r\n        case actionTypes.MULTIPLY:\r\n            if(state.operation!==null) {\r\n                result = calculateResult(state.value,parseFloat(state.result),state.operation);\r\n                return {\r\n                    value: parseFloat(result),\r\n                    operation:'*',\r\n                    result:'0'\r\n                };\r\n            } else {\r\n                return {\r\n                    value: parseFloat(state.result),\r\n                    operation:'*',\r\n                    result:'0'\r\n                };\r\n            }\r\n\r\n        case actionTypes.DIVIDE:\r\n            return {\r\n                value: parseFloat(state.result),\r\n                operation:'/',\r\n                result:'0'\r\n            };\r\n        case actionTypes.POWER:\r\n            return {\r\n                value: parseFloat(state.result),\r\n                operation:'^',\r\n                result:'0'\r\n            };\r\n        case actionTypes.PERCENTAGE:\r\n            return state;\r\n\r\n        case actionTypes.EQUAL:\r\n            result = calculateResult(state.value,parseFloat(state.result),state.operation);\r\n            return {\r\n                operation:null,\r\n                result:result,\r\n                value:result\r\n            };\r\n\r\n        case actionTypes.ALL_CLEAR:\r\n            return {\r\n                result: '0',\r\n                operation:null,\r\n                value: 0\r\n            };\r\n        case actionTypes.CLEAR:\r\n            return {\r\n                ...state,\r\n                result: state.result.substring(0, state.result.length - 1)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}